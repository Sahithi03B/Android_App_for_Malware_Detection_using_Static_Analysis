package com.example.spyware4;
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;

public class AppListAdapter extends ArrayAdapter<PackageInfo> implements Filterable {

    private List<PackageInfo> apps;
    private List<PackageInfo> filteredApps;
    private final PackageManager packageManager;

    public AppListAdapter(Context context, List<PackageInfo> apps) {
        super(context, R.layout.list_item_app, apps);
        this.apps = apps;
        this.filteredApps = new ArrayList<>(apps);
        this.packageManager = context.getPackageManager();
    }

    @Override
    public int getCount() {
        return filteredApps.size();
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View itemView = convertView;
        if (itemView == null) {
            LayoutInflater inflater = LayoutInflater.from(getContext());
            itemView = inflater.inflate(R.layout.list_item_app, parent, false);
        }

        PackageInfo appInfo = filteredApps.get(position);

        ImageView appIconImageView = itemView.findViewById(R.id.appIcon);
        TextView appNameTextView = itemView.findViewById(R.id.appName);

        // Set app icon
        Drawable appIcon = getApplicationIcon(appInfo);
        appIconImageView.setImageDrawable(appIcon);

        // Set app name
        String appName = appInfo.applicationInfo.loadLabel(packageManager).toString();
        appNameTextView.setText(appName);

        return itemView;
    }

    private Drawable getApplicationIcon(PackageInfo packageInfo) {
        try {
            return packageManager.getApplicationIcon(packageInfo.packageName);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
            // Return the default icon if not found
            return getContext().getDrawable(R.drawable.ic_launcher_foreground);
        }
    }

    @Override
    public Filter getFilter() {
        return new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                String filterString = constraint.toString().toLowerCase();

                FilterResults results = new FilterResults();

                final List<PackageInfo> list = apps;

                int count = list.size();
                final List<PackageInfo> nlist = new ArrayList<>(count);

                for (PackageInfo app : list) {
                    String appName = app.applicationInfo.loadLabel(packageManager).toString().toLowerCase();
                    if (appName.contains(filterString)) {
                        nlist.add(app);
                    }
                }

                results.values = nlist;
                results.count = nlist.size();

                return results;
            }

            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                filteredApps = (List<PackageInfo>) results.values;
                notifyDataSetChanged();
            }
        };
    }

    public void setAppsList(List<PackageInfo> apps) {
        this.apps = apps;
        getFilter().filter("");
    }
    @Override
    public PackageInfo getItem(int position) {
        return filteredApps.get(position);
    }

}


