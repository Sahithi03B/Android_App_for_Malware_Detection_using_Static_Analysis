package com.example.spyware4;
import android.content.DialogInterface;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.os.Bundle;
import androidx.appcompat.widget.SearchView;

import androidx.appcompat.widget.SearchView;
import androidx.core.content.ContextCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.TextView;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import java.util.ArrayList;
import java.util.List;

public class AnalyticsActivity extends AppCompatActivity {

    private EnergyConsumptionPredictor predictor;
    private ListView appsListView;
    private AppListAdapter appsAdapter;
    private List<PackageInfo> installedApps;
    private PackageManager packageManager;
    private SearchView searchView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_analystics);

        predictor = new EnergyConsumptionPredictor(this, "model.tflite");

        // Initialize UI elements
        appsListView = findViewById(R.id.appsListView);
        searchView = findViewById(R.id.searchView);
        setupSearchView();
        // Initialize the package manager and list of installed apps
        packageManager = getPackageManager();
        try {
            installedApps = packageManager.getInstalledPackages(PackageManager.GET_PERMISSIONS);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Create an adapter for the list of apps
        appsAdapter = new AppListAdapter(this, installedApps);
        appsListView.setAdapter(appsAdapter);

        // Set up the click event to display permissions on app selection
        appsListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
                PackageInfo selectedAppInfo = appsAdapter.getItem(position);
                showPermissionsDialog(selectedAppInfo);
            }
        });
        //setupSearchView();

    }
    private void setupSearchView() {
        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                filterApps(newText);
                return true;
            }
        });
    }
    private void filterApps(String query) {
        // Filter the list of installed apps based on the search query
        List<PackageInfo> filteredApps = new ArrayList<>();

        for (PackageInfo app : installedApps) {
            String appName = app.applicationInfo.loadLabel(packageManager).toString().toLowerCase();
            if (appName.contains(query.toLowerCase())) {
                filteredApps.add(app);
            }
        }

        // Update the adapter with the filtered list
        appsAdapter.setAppsList(filteredApps);
        appsAdapter.notifyDataSetChanged();
    }

    private void showPermissionsDialog(PackageInfo packageInfo) {
        StringBuilder permissionsStringBuilder = new StringBuilder();

        String[] permissions = packageInfo.requestedPermissions;
        if (permissions != null && permissions.length > 0) {
            for (String permission : permissions) {
                permissionsStringBuilder.append(permission).append(",");
            }
        }

        String permissionsString = permissionsStringBuilder.toString();
        if (permissionsString.endsWith(",")) {
            permissionsString = permissionsString.substring(0, permissionsString.length() - 1);
        }

        float prediction = predictor.predictEnergyConsumption(permissionsString);

        // Use a custom layout for the AlertDialog
        View customLayout = LayoutInflater.from(this).inflate(R.layout.custom_alert_dialog, null);
        TextView messageTextView = customLayout.findViewById(R.id.messageTextView);

        // Set the color based on prediction value
        int color;
        if (prediction*100 >= 0.0 && prediction*100 <= 50.0) {
            color = getResources().getColor(R.color.light_green); // Use a color resource for consistency
        } else if (prediction*100 > 50.0 && prediction*100 <= 80.0) {
            color = getResources().getColor(R.color.light_yellow);
        } else {
            color = getResources().getColor(R.color.light_red);
        }

        // Set the background color and text color
        customLayout.setBackgroundColor(color);
        messageTextView.setText(String.format("Prediction: %.2f%%", prediction * 100));
        messageTextView.setTextColor(Color.BLACK);

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Prediction for " + packageInfo.applicationInfo.loadLabel(packageManager));
        builder.setView(customLayout);

        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                dialogInterface.dismiss();
            }
        });

        // Show the dialog
        AlertDialog alertDialog = builder.create();
        alertDialog.show();
    }
}





